---
title: Libraries - yaml.info
links:
- overview: Libary Overview
- features:
    title: Features not implemented
    children:
    - empty: Empty Keys
    - alias: Alias Characters

sections:
- name: intro
  title: Libraries implementing YAML
  content:
  - |
    YAML processors are available in many languages, some even in bash,
    although probably not very complete.
  - |
    Because of the history of YAML the implementations differ a lot.
  - |
    <ul>
    <li>There are three versions, `1.0`, `1.1` and `1.2`.</li>
    <li>The specification for version `1.1` had problems like ambiguity</li>
    <li>`1.2` was created to solve the problems with `1.1`, but already many
      implementations had been created and were never updated.</li>
    <li>There was no test suite until 2016</li>
    </ul>

- name: overview
  title: Library Overview
  content:
  - |
    This table is work in progress. More information will be following.
  - table: 1


- name: features
  title: Features not implemented in every Library
  content:
  - |
    libyaml and PyYAML have been implemented by Kirill Simonov in 2006.
    Many other implementations were ported from them or use libyaml bindings.
  - |
    There were a number of features where the author diverged from the spec.
  - |
    While that might have been a good idea, the YAML Spec itself did not
    follow that, and so some libraries support features, while implementations
    originating from libyaml do not.
  - |
    This is a (still very incomplete) list of features that you should avoid
    to be compatible to as much libraries as pssible.
  - Most of them aren't relevant in the real world.

- name: empty
  title: Empty Keys
  content:
  - yaml: |
      ---
      key: value
      : value2

  - |
    In YAML 1.2, by default, this is basically the same as:
  - yaml: |
      ---
      key: value
      null: value2
  - |
    Depending on the programming language, the key will often be converted to
    the empty string.
  - |
    Having empty strings or `null` as keys is rare, and if you need them, you
    should explicitly write what you want:
  - yaml: |
      ---
      key: value
      null: value2
      ---
      key: value
      '': value2

- name: alias
  title: Allowed characters in Aliases/Anchors
  content:
  - |
    The spec says that pretty much every character is allowed:
  - yaml: |
      - &üòÅ unicode anchor
      - &:@*!$"<foo> WTF?
  - |
    libyaml originated libraries usually only support `[A-Za-z0-9-]`:
  - yaml: |
      - &Valid-anchor1 simple

# TODO
# http://matrix.yaml.io/details/7Z25.html#c-libyaml-event
# Bare document after ...
#    ---
#    scalar1
#    ...
#    key: value
# http://matrix.yaml.io/details/K3WX.html#c-libyaml-event
# http://matrix.yaml.io/details/5MUD.html#c-libyaml-event
# http://matrix.yaml.io/details/5T43.html#c-libyaml-event
# http://matrix.yaml.io/details/QT73.html#c-libyaml-event
# http://matrix.yaml.io/details/HWV9.html#c-libyaml-event
# http://matrix.yaml.io/details/4MUZ.html#c-libyaml-event
# http://matrix.yaml.io/details/9SA2.html#c-libyaml-event
# http://matrix.yaml.io/details/NJ66.html#c-libyaml-event
# http://matrix.yaml.io/details/JR7V.html#c-libyaml-event
# http://matrix.yaml.io/details/A2M4.html#c-libyaml-event
# http://matrix.yaml.io/details/6BCT.html#c-libyaml-event
# http://matrix.yaml.io/details/DBG4.html#c-libyaml-event
# http://matrix.yaml.io/details/WZ62.html#c-libyaml-event
# http://matrix.yaml.io/details/R4YG.html#c-libyaml-event
# http://matrix.yaml.io/details/M7A3.html#c-libyaml-event
# http://matrix.yaml.io/details/UT92.html#c-libyaml-event
# http://matrix.yaml.io/details/W4TN.html#c-libyaml-event
# http://matrix.yaml.io/details/Q5MG.html#c-libyaml-event
# http://matrix.yaml.io/details/FP8R.html#c-libyaml-event
# http://matrix.yaml.io/details/DK3J.html#c-libyaml-event

